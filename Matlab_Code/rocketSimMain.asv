clear;
close;
clc;

global root

root = getRoot();

global rhof rhoAir g OF Dp_fin Mr L eta_n Ar Cd Mox_total t_fin AcAt AeAt At Pc; 
%rhof: density of fuel              [kg/m3]
%rhoAir: density of air             [kg/m3]
%g: Gravitational acceleration      [m/s2]
%OF: Overall O/F ratio              [unitless]
%Dp_fin: Final port diameter        [m]
%Mr: Mass of rocket w/o fuel        [kg]
%L: Length of grain                 [m]
%eta_n: nozzle efficiency           [unitless]
%Ar: area of rocket                 [m2]
%Cd: Coefficient of Drag            [unitless]
%Mox_total: Total mass of oxidizer  [kg] (This is a temporary variable for
                                         %for the oxTank model)
%t_fin: Time to empty n2o tank      [s]  (This is a temporary variable for
                                         %for the oxTank model)
%AcAt: Area Chamber / Area Throat
%AeAt: Area Exit / Area Throat                                         
%At: Area Throat                    [m2]
%Pc: pressure in the combusion chamber

global D_feed kTotal rhol rhog hl hg Ptank Vtank nosPropSet Af prop Ttank ;
%D: diameter of feedline
%kTotal: Total headloss coefficient of Nos injector system
%Ptank: current pressure in Nos tank
%rhol: density of liquid Nos
%rhog: density of gaseous Nos
%hl: specific enthalpy of liquid Nos
%hg: specific enthalpy of gaseous Nos
%Vtank: Volume of Nos tank
%nosPropSet: A data set of Nos properties at vapor dome
%Af: Boiling flux factor
%prop: A struct whos contents corrispond with column numbers of nosPropSet
    %EX: prop.temp = 1;
    %    prop.rhol = 3;
    %The temperature characteristic is the first column of nosPropSet while 
    %density of liquid nos is the third
    
prop.temp = 1;
prop.p = 2;
prop.rhol = 3;
prop.rhog = 4;
prop.hl = 5;
prop.hg = 6;
prop.dh = 7;

Af = 1.3; %Boiling flux factor
kTotal = 44; %Total headloss coefficient (Tank Valve k = 0.5, Injector k = 1)
Ttank = 277.778; %K (THIS CANNOT BE OVER 298K OR DENSITY VALUES EXCEED DATASET)
x = 0.95; % Fraction of Nos that is liquid

global rpaStruct indexMap;

rpaSet = extract([root,'rpa_results.txt']);
rpaSet(:,2) = rpaSet(:,2) * 10^6; %Convert all pressures from MPa to Pa
[rpaStruct, indexMap] = organizer(rpaSet);

Dp_min = 0.5 * 0.025;%list of port diameters (inchs to meters)
Dp_fin_max = 1.5 * 0.025;%list of outer diameter of grain (inchs to meters)
minGrainThickness = 1 * 0.025;%The minimum thickness of the grain (difference between Dp_fin and Dp)
Mox_list = 5 * 0.454; %list of total oxidizer mass (lb to kg)
OF_list = 3:6;%1:1:10; %List of overall OF ratios
D_feed_list = [1/4, 5/16, 3/8] * 0.025; %List of feedline diameters (inchs to meters)
AcAt_list = indexMap.AcAt(:,1); %List of AreaChamber/AreaThroat ratios
AeAt_list = indexMap.AeAt(:,1); %List of AreaExit/AreaThroat ratios

nosPropSet = xlsread([root, 'Nos_Properties.xlsx']);
nosPropSet(:,2) = nosPropSet(:,2) * 1e3; %Convert from kPa to Pa
nosPropSet(:,[5,6,7]) = nosPropSet(:,[5,6,7]) * 1e3; % Convert from kJ/kg to J/kg


%The weight of the bottle needs to be accounted for

combinations = generateRocketVariations(Dp_min, Dp_fin_max, minGrainThickness, Mox_list, OF_list, AcAt_list, AeAt_list, D_feed_list);
NN = size(combinations,1);

apogee = zeros(NN,1);
PercentFuelRemaining = zeros(NN,1);
MaxVel = zeros(NN,1);
MaxPcList = zeros(NN,1);
Isp_list = zeros(NN,1);
fprintf('%d many variations\n',NN);

timeElapsed = 0;
tic
for ii = 1 : NN
    rhof = 900;
    rhoAir = 1.225;
    g = 9.81;
    OF = combinations(ii,4);
    Dp_fin = combinations(ii,2);
    Mr = 6;
    eta_n = 0.95;
    Ar = 0.00817; %4inch diamter
    Cd = 0.7; 
    t_fin = 7;
    AcAt = combinations(ii,5);
    AeAt = combinations(ii,6);
    At = (1/AcAt) * 0.25 * pi * Dp_fin^2;
    Pc = 101e3;
    D_feed = combinations(ii,7);
    nosProp = getNosProp(nosPropSet, prop.temp, Ttank); %psi to Pa
    Ptank = nosProp(prop.p);
    
    
    Dp = combinations(ii,1); %Diameter of Port [m]
    Mox = combinations(ii,3); %Total mass of oxidizer left [kg]
    Mox_total = Mox;
    Mf = Mox / OF; %Total mass of fuel left [kg]
    L = 4 * Mox / ( pi * rhof * OF * (Dp_fin^2 - Dp^2));
    vel = 0; %Velocity of rocket [m/s]
    alt = 0; %Altitude of rocket [m]
    
    Mox_l = Mox * x;
    Mox_g = Mox * (1 - x);

    rhog = nosProp(prop.rhog);
    rhol = nosProp(prop.rhol);

    Vtank = Mox_g / rhog + Mox_l / rhol;

    hl = nosProp(prop.hl);
    hg = nosProp(prop.hg);

    ug = hg - Ptank / rhog;
    ul = hl - Ptank / rhol;

    Utank = Mox_g * ug + Mox_l * ul;

    init = [Dp, Mf, Utank, Mox_g, Mox_l, vel, alt]; %Initial conditions of dynamic variables
    t = [0 60];

%     useless = rocketFunc(1,init);
%     [T,Y] = ode45(@rocketFunc,t,init);
    [T,Y] = ode1(@rocketFunc,t,init);
    
    Ptank = nosProp(prop.p);
    Pc = 101e3;
    rhog = nosProp(prop.rhog);
    rhol = nosProp(prop.rhol);
    hl = nosProp(prop.hl);
    hg = nosProp(prop.hg);
    [Thrust_list, Pc_list, Ptank_list, Isp] = getRocketPerformace(T, Y);
%     plot(T, Thrust_list);
    
    try
        apogee(ii) = Y((find(diff(Y(:,7)) < 0,1)),7);
        PercentFuelRemaining(ii) = Y(end,2) / Mf * 100;
        MaxVel(ii) = max(Y(:,6));
        MaxPcList(ii) = max(Pc_list);
        Isp_list(ii) = Isp;
    catch Ex
        apogee(ii) = -1;
        PercentFuelRemaining(ii) = -1;
        MaxVel(ii) = -1;
        MaxPcList(ii) = -1;
        Isp_list(ii) = -1;
    end
    
    if mod(ii,10) == 0
        clc;
        fprintf('%d many variations\n',NN);
%         disp([num2str(ii), ' runs complete']);
        
        timeElapsed = timeElapsed + toc;
        timeRemaining = duration(0,0,ii/timeElapsed * (NN - ii));
        sizeShow = 30;
        showNum = floor(ii/NN*sizeShow);
        disp(['[',repmat('#',1,showNum), repmat(' ',1,sizeShow-showNum),']']);
        disp(['Time remaining: ', char(timeRemaining)]);
%         disp(['Total time elapsed: ', num2str(timeElapsed),'s']);
        tic
    end
%     plot(T,Y(:,7));
%     close all;
end

resultSet = [combinations, apogee, PercentFuelRemaining, MaxVel, MaxPcList, Isp_list];

resultSet(:,[1,2]) = resultSet(:,[1,2]) / 0.025; % m to in
resultSet(:,3) = resultSet(:,3) / 0.454; % kg to lb
resultSet(:,7) = resultSet(:,7) /0.025; % m to in
resultSet(:,8) = resultSet(:,8) * 3.281; % m to ft
resultSet(:,10) = resultSet(:,10) * 2.237; % m/s to mph
resultSet(:,11) = resultSet(:,11) / 6894.76; % Pa to psi




%CHANGE OUTPUT UNITS

title = {'Diameter of Port (in)','Outside Diameter (in)','Mass of Oxidizer (lb)','O/F',...
         'Ac/At','Ae/At','Feedline Diameter (in)','Apogee (ft)','Percent fuel remaining (%)',...
         'Max Velocity (mph)','Max Chamber Pressure (psi)','Isp (s)'};
printable = vertcat(title,num2cell(resultSet));
delete([root, 'rocketResults.xlsx']);
xlswrite([root, 'rocketResults.xlsx'],printable);

%%
%Testing variables
% rhof = 900;
% rhoAir = 1.225;
% g = 9.81;
% OF = 6;
% Dp_fin = 3.875 * 0.025; %inch to meter
% Mr = 6;
% char_v = 1569.2801;
% Cf = 1.4866;
% eta_c = 0.9;
% eta_n = 0.9;
% Ar = 0.00817; %4inch diamter
% Cd = 0.7; 
% t_fin = 6;
% 
% Dp = 1 * 0.025; %Diameter of Port [m] (inch to meter)
% Mox = 15; %Total mass of oxidizer left [kg]
% Mox_total = Mox;
% Mf = Mox / OF; %Total mass of fuel left [kg]
% L = 4 * Mox / ( pi * rhof * OF * (Dp_fin^2 - Dp^2));
% vel = 0; %Velocity of rocket [m/s]
% alt = 0; %Altitude of rocket [m]

